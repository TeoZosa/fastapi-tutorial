"""Middleware"""
# You can add middleware to FastAPI applications.
# A "middleware" is a function that 
    # works with every request before it is processed by any specific path operation. 
    # And also with every response before returning it.
    
# It takes each `request` that comes to your application.
    # It can then 
        # do something to that `request` 
        # or run any needed code.
# Then it passes the request to be processed by the rest of the application (by some path operation).

# It then takes the response generated by the application (by some path operation).
    # It can 
        # do something to that `response` 
        # or run any needed code.
# Then it returns the `response`.

# Technical Details
    # If you have dependencies with `yield`, 
        # the exit code will run AFTER THE MIDDLEWARE.
    # If there were any background tasks (documented later), 
        # they will run AFTER ALL THE MIDDLEWARE.
import time

from fastapi import FastAPI, Request

app = FastAPI()


# Create a middleware
@app.middleware("http")
# The middleware function receives:
async def add_process_time_header(
        request: Request,
        # The request.

        call_next
        # A function `call_next` that will receive the `request` as a parameter.
            # This function will 
                # pass the `request` to the corresponding path operation.
                # returns the `response` generated by the corresponding path operation.
            # You can then 
                # modify further the `response` before returning it.
        ):
    # add code to be run with the request, before any path operation receives it.
    start_time = time.time()
    
    response = await call_next(request)
    
    # And also after the response is generated, before returning it.
    process_time = time.time() - start_time

    # For example, you could 
    # add a custom header `X-Process-Time` 
        # containing the time in seconds that it took to process the request 
    response.headers["X-Process-Time"] = str(process_time)
    # Tip
        # custom proprietary headers can be added using the 'X-' prefix.
        # But IF YOU HAVE CUSTOM HEADERS THAT YOU WANT A CLIENT IN A BROWSER TO BE ABLE TO SEE, 
            # you need to ADD THEM TO YOUR `CORS` CONFIGURATIONS (CORS (Cross-Origin Resource Sharing)) 
                # using the parameter `expose_headers` documented in Starlette's CORS docs.

    # generate a response
    return response

 # You can later read more about other middlewares in the "Advanced User Guide: Advanced Middleware".
